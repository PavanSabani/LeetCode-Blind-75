class Solution {
    public int numIslands(char[][] grid) {
        int islands = 0;
        int rows = grid.length;
        int cols = grid[0].length;
        Set<String> visit = new HashSet<>();

        int[][] directions = {{1,0},{-1,0},{0,1},{0,-1}};

        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                if(grid[i][j]=='1' && !visit.contains(i + "," + j)){
                    islands++;
                    bfs(grid,i,j,visit,directions,rows,cols);
                }
                
            }
        }

        return islands;

        
    }
    private void bfs(char[][]grid,int r,int c,Set<String>visit,int[][] directions,int rows,int cols){
            Queue<int[]> queue = new LinkedList<>();
            visit.add(r + "," + c);
            queue.add(new int[]{r,c});

            while(!queue.isEmpty()){
                int []point = queue.poll();
                int row = point[0] ,col =point[1];

                for(int[] direction : directions){
                    int nr = row + direction[0] , nc = col + direction[1];
                    if(nr>=0 && nr < rows && nc >= 0 && nc < cols &&
                     grid[nr][nc]=='1' && !visit.contains(nr + ","+nc)){
                        queue.add(new int[]{nr,nc});
                        visit.add(nr+","+nc);
                    }
                }
            }
        }
}