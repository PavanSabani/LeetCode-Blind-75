// recurrsive approach :
class Solution {
    public int getans(int[]nums,int n,int ind,int prev_ind,int[][]dp){

        if(ind==n){
            return 0;
        }
        if(dp[ind][prev_ind+1]!=-1){
            return dp[ind][prev_ind+1];
        }

        
        int notTaken = 0+getans(nums,n,ind+1,prev_ind,dp);
        int taken = 0;
        if(prev_ind==-1||nums[ind]>nums[prev_ind]){
            taken = 1+getans(nums,n,ind+1,ind,dp);
        }
        dp[ind][prev_ind+1]=Math.max(taken,notTaken);
        return dp[ind][prev_ind+1];

    }
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int [][]dp = new int[n][n+1];

        for(int[] row:dp){
            Arrays.fill(row,-1);
        }

        return getans(nums,n,0,-1,dp);
    }
}