class Solution {
    public void findCombinations(int ind,int[]candidates,int target,List<List<Integer>>ansList, List<Integer>ds){
        if(ind==candidates.length){
            if(target==0){
                ansList.add(new ArrayList<>(ds));
            }
            return;
        }
        if(candidates[ind]<=target){
            ds.add(candidates[ind]);
            findCombinations(ind,candidates,target-candidates[ind],ansList,ds);
            ds.remove(ds.size()-1);
        }
        findCombinations(ind+1,candidates,target,ansList,ds);

    }
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List < List < Integer >> ans = new ArrayList < > ();
        findCombinations(0, candidates, target, ans, new ArrayList < > ());
        return ans;
    }
}

first thing that should come while solving problems that as for
returing list or set of integers combination is RECURRSION

1st time include the current index 
else increse the index by one 

base case ind==nums.length:
            target==0
                ans.add(ds);